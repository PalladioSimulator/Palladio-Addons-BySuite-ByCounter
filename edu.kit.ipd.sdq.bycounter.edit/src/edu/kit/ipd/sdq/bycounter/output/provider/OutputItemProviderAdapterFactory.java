/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package edu.kit.ipd.sdq.bycounter.output.provider;

import edu.kit.ipd.sdq.bycounter.output.util.OutputAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OutputItemProviderAdapterFactory extends OutputAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OutputItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.OutputModelRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputModelRepositoryItemProvider outputModelRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.OutputModelRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputModelRepositoryAdapter() {
		if (outputModelRepositoryItemProvider == null) {
			outputModelRepositoryItemProvider = new OutputModelRepositoryItemProvider(this);
		}

		return outputModelRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.MeasurementRun} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasurementRunItemProvider measurementRunItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.MeasurementRun}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasurementRunAdapter() {
		if (measurementRunItemProvider == null) {
			measurementRunItemProvider = new MeasurementRunItemProvider(this);
		}

		return measurementRunItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.Request} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.Request}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.ObservedEntityExecution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObservedEntityExecutionItemProvider observedEntityExecutionItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.ObservedEntityExecution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObservedEntityExecutionAdapter() {
		if (observedEntityExecutionItemProvider == null) {
			observedEntityExecutionItemProvider = new ObservedEntityExecutionItemProvider(this);
		}

		return observedEntityExecutionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.ResourceDemands} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceDemandsItemProvider resourceDemandsItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.ResourceDemands}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceDemandsAdapter() {
		if (resourceDemandsItemProvider == null) {
			resourceDemandsItemProvider = new ResourceDemandsItemProvider(this);
		}

		return resourceDemandsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.FunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionCallItemProvider functionCallItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.FunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionCallAdapter() {
		if (functionCallItemProvider == null) {
			functionCallItemProvider = new FunctionCallItemProvider(this);
		}

		return functionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.ParameterInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterInstanceItemProvider parameterInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.ParameterInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterInstanceAdapter() {
		if (parameterInstanceItemProvider == null) {
			parameterInstanceItemProvider = new ParameterInstanceItemProvider(this);
		}

		return parameterInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.JavaVMCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaVMCallItemProvider javaVMCallItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.JavaVMCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaVMCallAdapter() {
		if (javaVMCallItemProvider == null) {
			javaVMCallItemProvider = new JavaVMCallItemProvider(this);
		}

		return javaVMCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.DoubleCharacterisation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleCharacterisationItemProvider doubleCharacterisationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.DoubleCharacterisation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleCharacterisationAdapter() {
		if (doubleCharacterisationItemProvider == null) {
			doubleCharacterisationItemProvider = new DoubleCharacterisationItemProvider(this);
		}

		return doubleCharacterisationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.LongCharacterisation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongCharacterisationItemProvider longCharacterisationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.LongCharacterisation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongCharacterisationAdapter() {
		if (longCharacterisationItemProvider == null) {
			longCharacterisationItemProvider = new LongCharacterisationItemProvider(this);
		}

		return longCharacterisationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.BooleanCharacterisation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanCharacterisationItemProvider booleanCharacterisationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.BooleanCharacterisation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanCharacterisationAdapter() {
		if (booleanCharacterisationItemProvider == null) {
			booleanCharacterisationItemProvider = new BooleanCharacterisationItemProvider(this);
		}

		return booleanCharacterisationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.ipd.sdq.bycounter.output.StringCharacterisation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringCharacterisationItemProvider stringCharacterisationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.ipd.sdq.bycounter.output.StringCharacterisation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringCharacterisationAdapter() {
		if (stringCharacterisationItemProvider == null) {
			stringCharacterisationItemProvider = new StringCharacterisationItemProvider(this);
		}

		return stringCharacterisationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (outputModelRepositoryItemProvider != null) outputModelRepositoryItemProvider.dispose();
		if (measurementRunItemProvider != null) measurementRunItemProvider.dispose();
		if (requestItemProvider != null) requestItemProvider.dispose();
		if (observedEntityExecutionItemProvider != null) observedEntityExecutionItemProvider.dispose();
		if (resourceDemandsItemProvider != null) resourceDemandsItemProvider.dispose();
		if (functionCallItemProvider != null) functionCallItemProvider.dispose();
		if (parameterInstanceItemProvider != null) parameterInstanceItemProvider.dispose();
		if (javaVMCallItemProvider != null) javaVMCallItemProvider.dispose();
		if (doubleCharacterisationItemProvider != null) doubleCharacterisationItemProvider.dispose();
		if (longCharacterisationItemProvider != null) longCharacterisationItemProvider.dispose();
		if (booleanCharacterisationItemProvider != null) booleanCharacterisationItemProvider.dispose();
		if (stringCharacterisationItemProvider != null) stringCharacterisationItemProvider.dispose();
	}

}
