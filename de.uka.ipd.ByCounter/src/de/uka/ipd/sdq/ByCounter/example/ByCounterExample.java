package de.uka.ipd.sdq.ByCounter.example;

import java.io.File;
import java.util.List;

import de.uka.ipd.sdq.ByCounter.execution.BytecodeCounter;
import de.uka.ipd.sdq.ByCounter.execution.CountingResult;
import de.uka.ipd.sdq.ByCounter.execution.CountingResultCollector;
import de.uka.ipd.sdq.ByCounter.utils.MethodDescriptor;

/**
 * <p>
 * This example class demonstrates the usage of ByCounter in different 
 * scenarios. This includes usage of the options, description of the 
 * methods to instrument and aggregation of results.
 * </p>
 * <p>
 * See the ByCounter introduction documentation for a more thorough exploration
 * of these examples.
 * </p>
 * 
 * @author Martin Krogmann
 * @author Michael Kuperberg
 * @since 0.9
 * @version 0.9
 */
public class ByCounterExample {
	
	/**
	 * The application entry point.
	 * @param args No arguments are accepted.
	 */
	public static void main(String[] args) {
		example1();
	}
	
	/**
	 * This dummy method is here to get instrumented in the example.
	 * @param str Some {@link String} that gets printed.
	 * @param f Some float that contributes to the result.
	 * @return An int value that does not mean much at all.
	 */
	public static int dummyMethod(String str, float f) {
		System.out.println(str);
		if(f > 0) {
			return -1;
		}
		int result = (int)(2*f);
		return result;
	}

	/**
	 * Quickstart example of the most basic ByCounter usage.
	 */
	public static void example1() {		
		// Set up a BytecodeCounter instance to use ByCounter. 
		BytecodeCounter counter = new BytecodeCounter();

		// specify the method to instrument
		MethodDescriptor myMethod = new MethodDescriptor(
				"de.uka.ipd.sdq.ByCounter.example.ByCounterExample",
				"public static int dummyMethod(java.lang.String str, float f)");
		
		// now tell ByCounter to instrument the specified method
		counter.instrument(myMethod);
		
		// make ByCounter execute the method
		counter.execute(myMethod, new Object[] {"Hello world!", 0.0f});
		
		// now that all measurements  are done, we can fetch the results
		// get the results list from CountingResultCollector
		List<CountingResult> results = 
			CountingResultCollector.getInstance().getResults();
		// output the results to the console/log
		for(CountingResult r : results) {
			CountingResultCollector.getInstance().logResult(r);
		}
		// clear the results as we do not need them anymore
		CountingResultCollector.getInstance().clearResults();
	}
	
	/**
	 * Example of ByCounter usage with options.
	 */
	public static void example2() {
		// Set up a BytecodeCounter instance to use ByCounter. 
		BytecodeCounter counter = new BytecodeCounter();
		
		// We do not want to use the CountingResultCollector, so
		// we tell ByCounter to write to a log file instead.
		counter.getInstrumentationParams().setUseResultCollector(false);
		counter.getInstrumentationParams().setResultLogFileName(
				"myResults" + File.separatorChar + "fun_{$CLASSNAME}_{$METHODNAME}.log");
		// we want the class files that are generated by ByCounter so we 
		// can get see what the instrumented file looks like
		counter.getInstrumentationParams().setWriteClassesToDisk(true);
		// we want to now more about the usage of arrays in our code
		counter.getInstrumentationParams().setUseArrayParameterRecording(true);

		// specify the method to instrument
		MethodDescriptor myMethod = new MethodDescriptor(
				"de.uka.ipd.sdq.ByCounter.example.ByCounterExample",
				"public static int dummyMethod(java.lang.String str, float f)");
		
		// now tell ByCounter to instrument the specified method
		counter.instrument(myMethod);
		
		// make ByCounter execute the method
		counter.execute(myMethod, new Object[] {"Hello world!", 0.0f});
		
		// since we wrote the results to a log file, we are done here
	}

}
